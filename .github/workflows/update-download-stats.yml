name: Update Download Statistics

on:
  schedule:
    # Runs every Monday at 6AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:

jobs:
  update-downloads:
    name: Calculate and update total download count
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Calculate total downloads
        id: downloads
        run: |
          # List of npm packages to check
          packages=(
            "prisma-schema-sorter"
            "prisma-query-inspector"
            "prisma-joi-generator"
            "prisma-yup-generator"
            "prisma-class-validator-generator"
            "json-to-prisma-schema-convertor"
            "prisma-zod-generator"
            "create-trpc-appx"
            "prisma-trpc-generator"
            "prisma-json-server-generator"
            "trpc-shield"
            "prisma-trpc-shield-generator"
            "prisma-custom-models-generator"
            "graphql-shield-generator"
            "firebase-functions-downloader"
            "lang-firestore"
            "firestore-indexes-diff"
            "firestore-prisma"
          )

          total_downloads=0

          echo "ðŸ“¦ Calculating download statistics..."
          
          for package in "${packages[@]}"; do
            echo "Checking downloads for $package..."
            downloads=$(curl -s "https://api.npmjs.org/downloads/range/2000-01-01:$(date +%Y-%m-%d)/$package" | node -e "
              const data = JSON.parse(require('fs').readFileSync(0, 'utf8'));
              if (data.downloads) {
                const total = data.downloads.reduce((sum, day) => sum + day.downloads, 0);
                console.log(total);
              } else {
                console.log(0);
              }
            ")
            
            if [ "$downloads" != "0" ]; then
              echo "  â†’ $downloads downloads"
              total_downloads=$((total_downloads + downloads))
            else
              echo "  â†’ Package not found or no data"
            fi
          done

          # Format the number with commas
          formatted_downloads=$(echo $total_downloads | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
          
          echo "ðŸŽ‰ Total downloads: $formatted_downloads"
          echo "downloads=$total_downloads" >> $GITHUB_OUTPUT
          echo "formatted_downloads=$formatted_downloads" >> $GITHUB_OUTPUT

      - name: Update README with download count
        run: |
          # Create a temporary file with the current download count
          echo "${{ steps.downloads.outputs.downloads }}" > download_count.txt
          
          # Update the README file with new download counts
          DOWNLOADS="${{ steps.downloads.outputs.formatted_downloads }}"
          
          # Update the About Me section
          sed -i "s/have collectively reached \*\*[0-9,]*K\+ downloads\*\*/have collectively reached **${DOWNLOADS}+ downloads**/" README.md
          
          # Update the Portfolio Overview badge
          sed -i "s/Total%20Downloads-[0-9,]*[K]*[+]*/Total%20Downloads-${DOWNLOADS}+/" README.md
          
          # Commit the changes if there are any
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet README.md download_count.txt; then
            echo "No changes to commit"
          else
            echo "Download count updated: $DOWNLOADS total downloads"
            git add README.md download_count.txt
            git commit -m "Update download statistics to $DOWNLOADS+ total downloads"
            git push
          fi

      - name: Create release with download stats
        run: |
          # Create a unique tag with timestamp to avoid conflicts
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG_NAME="downloads-${{ steps.downloads.outputs.downloads }}-${TIMESTAMP}"
          
          # Create release with download statistics
          gh release create "${TAG_NAME}" \
            --title "Download Stats Update - ${{ steps.downloads.outputs.formatted_downloads }}+" \
            --notes "ðŸ“Š **Total Downloads Milestone**

          ðŸŽ‰ **${{ steps.downloads.outputs.formatted_downloads }}+ total downloads** across all npm packages!
          
          ðŸ“ˆ **Package Breakdown:**
          - Prisma ecosystem tools leading the way
          - tRPC utilities gaining momentum  
          - Firebase tools growing steadily
          - Developer productivity extensions
          
          ðŸ“… **Recorded:** $(date '+%B %d, %Y at %H:%M UTC')
          
          This milestone represents the collective impact of open source tools 
          helping thousands of developers build better applications." \
            --latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

